# !/usr/bin/env python3
#
# ========= How to use =========
# DEBUG / INFO / WARNING / ERROR / CRITICAL
# DEBUG - Detailed information, typically of interest only when diagnosing problems.
# INFO - Confirmation that things are working as expected.
# WARNING - An indication that something unexpected happened, or indicative of some problem
# in the near future (e.g. ‘disk space low’). The software is still working as expected.
# ERROR - Due to a more serious problem, the software has not been able to perform some function.
# CRITICAL - A serious error, indicating that the program itself may be unable to continue running.
#
# import sys
# configuration = {
#             'version': 1,
#             'formatters': {
#                 # 'verbose': {
#                 #     'format': ("%(asctime)s [%(levelname)s] "
#                 #                "%(name)s:%(lineno)s %(message)s"),
#                 #     'datefmt': "%Y-%m-%d %H:%M:%S"
#                 # },
#                 'verbose': {
#                     'format': ("%(asctime)s [%(levelname)s] "
#                                "%(message)s"),
#                     'datefmt': "%Y-%m-%d %H:%M:%S"
#                 },
#                 'simple': {
#                     'format': '%(levelname)s %(message)s'
#                 },
#             },
#             'handlers': {
#                 'application-main-__logger': {'class': 'logging.handlers.RotatingFileHandler',
#                                             'formatter': 'verbose',
#                                             'level': 'DEBUG',
#                                             'filename': 'logs/service.log',
#                                             'maxBytes': 52428800,
#                                             'backupCount': 7},
#                 'application-prom_api-__logger': {'class': 'logging.handlers.RotatingFileHandler',
#                                                 'formatter': 'verbose',
#                                                 'level': 'DEBUG',
#                                                 'filename': 'logs/prom_api.log',
#                                                 'maxBytes': 52428800,
#                                                 'backupCount': 7},
#                 'application-LibByzaticCommon-__logger': {'class': 'logging.handlers.RotatingFileHandler',
#                                              'formatter': 'verbose',
#                                              'level': 'DEBUG',
#                                              'filename': 'logs/LibByzaticCommon.log',
#                                              'maxBytes': 52428800,
#                                              'backupCount': 7},
#                 'application-prom_client-__logger': {'class': 'logging.handlers.RotatingFileHandler',
#                                                    'formatter': 'verbose',
#                                                    'level': 'DEBUG',
#                                                    'filename': 'logs/prom_client.log',
#                                                    'maxBytes': 52428800,
#                                                    'backupCount': 7},
#                 'application-Graphite-__logger': {'class': 'logging.handlers.RotatingFileHandler',
#                                                 'formatter': 'verbose',
#                                                 'level': 'DEBUG',
#                                                 'filename': 'logs/Graphite.log',
#                                                 'maxBytes': 52428800,
#                                                 'backupCount': 7},
#                 'console': {
#                     'class': 'logging.StreamHandler',
#                     'level': 'DEBUG',
#                     'formatter': 'verbose',
#                     'stream': sys.stdout,
#                 },
#             },
#             'loggers': {
#                 'app_logger': {
#                     'handlers': ['application-main-__logger', 'console'],
#                     'level': 'DEBUG'
#                 },
#                 'prom_api_logger': {
#                     'handlers': ['application-prom_api-__logger', 'console'],
#                     'level': 'DEBUG'
#                 },
#                 'basic_logger': {
#                     'handlers': ['application-LibByzaticCommon-__logger', 'console'],
#                     'level': 'DEBUG'
#                 },
#                 'prom_client_logger': {
#                     'handlers': ['application-prom_client-__logger', 'console'],
#                     'level': 'DEBUG'
#                 },
#                 'graphite_logger': {
#                     'handlers': ['application-Graphite-__logger', 'console'],
#                     'level': 'DEBUG'
#                 },
#                 'root': {
#                     'level': 'ERROR'
#                 }
#             }
#         }
#
#
#
#
# TODO: COLORED OUTPUT
#
# https://stackoverflow.com/questions/45923290/how-to-get-the-current-log-level-in-python-logging-module
#
# I decided to do this a different way and add color through the string itself with a level number:
#
# def set_color(org_string, level=None):
#     color_levels = {
#         10: "\033[36m{}\033[0m",       # DEBUG
#         20: "\033[32m{}\033[0m",       # INFO
#         30: "\033[33m{}\033[0m",       # WARNING
#         40: "\033[31m{}\033[0m",       # ERROR
#         50: "\033[7;31;31m{}\033[0m"   # FATAL/CRITICAL/EXCEPTION
#     }
#     if level is None:
#         return color_levels[20].format(org_string)
#     else:
#         return color_levels[int(level)].format(org_string)
# So for example:
#
# __logger.info(set_color("test"))
# __logger.debug(set_color("test", level=10))
# __logger.warning(set_color("test", level=30))
# __logger.error(set_color("test", level=40))
# __logger.fatal(set_color("test", level=50))
#
